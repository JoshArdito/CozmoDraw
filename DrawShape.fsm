
from cozmo_fsm import *
from Drawer import *
from cozmo.util import *
import math

# length in mm
LEN_COZMO = 85

class GetShapes(StateNode):
    def start(self, event = None):
        super().start()
        shapes = Drawer().getShapes()
        (xpos, ypos, heading) = (0,0,0)

        moves = []
        for (x, y, shape) in shapes:
            if (shape != SHAPE_CIRCLE):
                (dx, dy) = (x - xpos, y - ypos)
                dist = math.sqrt(dx**2 + dy**2)
                q = wrap_angle(-heading + math.atan2(dy, dx))
                (xpos, ypos) = (x,y)
                heading += q
                moves.append((dist, q, shape))
        self.post_data(moves)

class ShapeToDraw(StateNode):
    def start(self, event = None):
        super().start()
        self.post_data(self.parent.shape)

class DoTurn(Turn):
    def start(self, event=None):
        self.angle = radians(self.parent.q)
        print("Turning by: ", self.angle)
        super().start()

class PostData(StateNode):
    def start(self, event=None):
        super().start()
        (self.parent.dist, self.parent.q, self.parent.shape) = event.data
        self.post_completion()

class DoMove(Forward):
    def start(self, event=None):
        print("Moving by: ", self.parent.dist)
        self.distance = distance_mm(self.parent.dist)
        super().start()

class DrawShape(StateMachineProgram):

    $setup {
        SetLiftHeight(1)=C=>GetShapes()=D=>draw_shapes=C=>AnimationNode('MajorWin')

        draw_shapes: Iterate()=D=> PostData() =C=> Forward(LEN_COZMO/2)
            =C=> DoTurn()
            =C=> Forward(-LEN_COZMO/2)
            =C=> shape_to_draw

        shape_to_draw: ShapeToDraw()
        shape_to_draw =D(SHAPE_LINE)=> SetLiftHeight(0) =C=> drive_line
        shape_to_draw =D(SHAPE_NONE)=> drive_line
        shape_to_draw =D(SHAPE_CIRCLE)=>
            Say("Circle not implemented") =CNext=> draw_shapes
        drive_line: DoMove()=C=>SetLiftHeight(1)=CNext=>draw_shapes

    }

